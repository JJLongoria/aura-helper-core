import { RecordType, SObject, SObjectField } from "../../types";

describe('Testing ./src/types/sObject.js', () => {
    test('Testing instance', () => {
        const sObject = new SObject('ns__name__c', 'Name', 'Names', '011', false);
        sObject.setName('ns__name__c');
        sObject.setLabel('Name');
        sObject.setLabelPlural('Names');
        sObject.setKeyPrefix('011');
        sObject.setCustom(false);
        sObject.setCustomSetting(false);
        sObject.setNamespace('ns');
        sObject.setQueryable(true);
        sObject.addField('name1', new SObjectField('Name', 'Name', 'string', false));
        sObject.addField('name2', new SObjectField('Name', 'Name', 'hierarchy', false));
        sObject.addField('name3', new SObjectField('Name', 'Name', 'Lookup', false));
        sObject.addField('name4', new SObjectField('Name', 'Name', 'reference', false));
        sObject.addField('name5', new SObjectField('Name', 'Name', 'number', false));
        sObject.addField('name6', new SObjectField('Name', 'Name', 'currency', false));
        sObject.addField('name7', new SObjectField('Name', 'Name', 'percent', false));
        sObject.addField('name8', new SObjectField('Name', 'Name', 'checkbox', false));
        sObject.addField('name9', new SObjectField('Name', 'Name', 'boolean', false));
        sObject.addField('name10', new SObjectField('Name', 'Name', 'datetime', false));
        sObject.addField('name11', new SObjectField('Name', 'Name', 'location', false));
        sObject.addField('name12', new SObjectField('Name', 'Name', 'date', false));
        sObject.addField('name13', new SObjectField('Name', 'Name', 'id', false));
        sObject.addField('name14', new SObjectField('Name', 'Name', 'double', false));
        sObject.addField('name15', new SObjectField('Name', 'Name', 'int', false));
        sObject.addField('name16', new SObjectField('ParentId', 'Name', 'Lookup', false));
        sObject.addField('name16', new SObjectField('OwnerId', 'Name', 'Lookup', false));
        const field = new SObjectField('CaseId', 'Name', 'Lookup', false);
        field.referenceTo.push('Case');
        sObject.addField('name16', new SObjectField('CaseId', 'Name', 'Lookup', false));
        sObject.addRecordType('devName', new RecordType('devName', 'devName', false, false));
        sObject.getField('name1');
        sObject.getField('name');
        sObject.getRecordType('devName');
        sObject.addSystemFields();
        sObject.fixFieldTypes();
        expect(sObject.name).toEqual('ns__name__c');
        const sObject2 = new SObject(sObject);
        expect(sObject2.name).toEqual('ns__name__c');
    });
});